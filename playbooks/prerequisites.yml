---
- hosts: all
  vars_files:
  - env_variables
  tasks:
  - name: enable firewalld service on all the nodes , part of k8s cluster
    service:
      name: firewalld
      state: started

  - name: enabled firewalld service on all the nodes , part of k8s cluster
    service:
      name: firewalld
      enabled: yes

  - name: permit traffic in default zone on port 6443/tcp
    firewalld:
      port: 6443/tcp
      permanent: yes
      state: enabled
  
  - name: permit traffic in default zone on port 379-2380/tcp
    firewalld:
      port: 2379-2380/tcp
      permanent: yes
      state: enabled

  - name: permit traffic in default zone on port 10250/tcp
    firewalld:
      port: 10250/tcp
      permanent: yes
      state: enabled

  - name: permit traffic in default zone on port 10251/tcp
    firewalld:
      port: 10251/tcp
      permanent: yes
      state: enabled

  - name: permit traffic in default zone on port 10252/tcp
    firewalld:
      port: 10252/tcp
      permanent: yes
      state: enabled

  - name: permit traffic in default zone on port 10255/tcp 
    firewalld:
      port: 10255/tcp 
      permanent: yes
      state: enabled

  - name: permit traffic in default zone on port 30000-32767/tcp
    firewalld:
      port: 30000-32767/tcp
      permanent: yes
      state: enabled
  
  - name: permit traffic in trusted zone and add source
    firewalld:
      source: "{{ item }}"
      zone: trusted
      permanent: yes
      state: enabled
    with_items: "{{ nested_list_all_cluster_nodes }}"

  - name: enable masquerade permanent on nodes
    firewalld:
      masquerade: yes
      state: enabled
      permanent: yes

  - name: perform modprobe
    shell: modprobe br_netfilter

  - name: restart firewalld service on all nodes, part of cluster
    service:
      name: firewalld
      state: restarted

  - name: Update the /etc/hosts file with node name
    lineinfile:
      path: "/etc/hosts"
      regexp: ".*\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}"
      line: "{{ hostvars[item]['ansible_env'].SSH_CONNECTION.split(' ')[2] }}\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}"
      state: present
      backup: yes
    register: hosts_update
    when: ansible_hostname != "{{ item }}" or ansible_hostname == "{{ item }}"
    with_items: "{{groups['all']}}"