---
- hosts: all
  vars_files:
  - env_variables
  tasks:
  - name: create a kubernetes repository to install required kube packages
    yum_repository:
      name: kubernetes
      description: kubernetes repository
      baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled: yes
      gpgcheck: no
      repo_gpgcheck: no
      gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

  - name: yum-clean-metadata
    command: yum clean metadata
    args:
      warn: no


  - name: install kubernetes packages kubeadm, kubectl, kubelet
    shell: sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
    register: kube_pack

  - debug:
      msg: "{{ kube_pack.stdout_lines }}"

  - name: set a pause after installation of packages
    pause:
      seconds: 10

  - name: modify the kubelet file according to usecase
    lineinfile:
      path: /etc/sysconfig/kubelet
      state: present
      regexp: '^KUBELET_EXTRA_ARGS='
      line: 'KUBELET_EXTRA_ARGS= --runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice'

  - name: start and enable the kubelet service
    shell: sudo systemctl enable --now kubelet

  - name: add lines in the file
    lineinfile:
      dest: /etc/sysctl.d/k8s.conf
      line: "{{ item }}"
      create: yes
    with_items:
      - 'net.bridge.bridge-nf-call-ip6tables = 1'
      - 'net.bridge.bridge-nf-call-iptables = 1'

  - name: load the parameters
    shell: sysctl --system

  - name: Disable swap space
    shell: swapoff -a
    
  - name: create a docker daemon file
    lineinfile: 
      dest: /etc/docker/daemon.json
      line: "{{ item }}"
      create: yes
    with_items: 
      - '{'
      - '"exec-opts": ["native.cgroupdriver=systemd"],'
      - '"log-driver": "json-file",'
      - '"log-opts": {'
      - '"max-size": "100m"'
      - '},'
      - '"storage-driver": "overlay2",'
      - '"storage-opts": ['
      - '"overlay2.override_kernel_check=true"'
      - ']'
      - '}'

  - name: Create a directory if it does not exist
    file:
      path: /etc/systemd/system/docker.service.d
      state: directory

  - name: reload docker daemon and restart the service
    shell: |
      systemctl daemon-reload
      systemctl restart docker
    register: docker_service

  - debug:
      msg: "{{ docker_service.stdout_lines }}"

  - name: set a pause at end of play
    pause:
      seconds: 10
